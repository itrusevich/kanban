{"version":3,"sources":["components/Header.js","components/TaskCard.js","components/Column.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","isOpenCreateTaskForm","onClick","openCreateTaskForm","htmlFor","type","value","taskInput","onChange","onTaskChange","priorityValue","id","onPriorityChange","taskSubmit","disabled","isValidTaskInput","taskReset","Task","useState","taskEdit","setTaskEdit","key","task","name","priority","status","onStatusChangeRight","onStatusChangeLeft","onTaskDelete","e","target","onTaskSave","trim","Column","tasks","filter","el","sort","a","b","map","TaskCard","Board","statuses","App","setIsOpenCreateTaskForm","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","setTaskInput","setPriorityValue","setTasks","setIsValidTaskInput","length","updatedTasks","push","Math","random","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c8cb43f.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nfunction Header(props) {\n\n  return (\n    <div className=\"container\">\n      <h1>Kanban</h1>\n\n      {!props.isOpenCreateTaskForm && <button className=\"btn btn-primary\" onClick={props.openCreateTaskForm}>Create Task</button>}\n\n      {props.isOpenCreateTaskForm &&\n        <form>\n          <div className=\"form-group\">\n\n            <label htmlFor=\"exampleInputEmail1\">Enter task name:</label>\n            <input type=\"text\" className=\"form-control\"\n              value={props.taskInput}\n              onChange={props.onTaskChange} />\n\n            <label htmlFor=\"exampleInputEmail2\">Enter priority:</label>\n            <select value={props.priorityValue} id=\"priority\" className=\"form-control\" onChange={props.onPriorityChange}>\n            <option value=\"0\">select priority</option>\n              <option value=\"1\">High</option>\n              <option value=\"2\">Medium</option>\n              <option value=\"3\">Low</option>\n            </select>\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\"\n            onClick={props.taskSubmit}\n            disabled={!(props.isValidTaskInput && props.priorityValue !== '0')}>Submit</button>\n\n          <button className=\"btn btn-secondary\"\n            onClick={props.taskReset}\n          >Cancel</button>\n        </form>\n      }\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport '../App.css';\n\nfunction Task(props) {\n  const [taskEdit, setTaskEdit] = useState({});\n\n  const editMode = (task) => {\n    setTaskEdit(task);\n  }\n\n  const onEditTaskChange = (e) => {\n    setTaskEdit({ ...taskEdit, name: e.target.value });\n  };\n\n  const taskSave = () => {\n    props.onTaskSave(taskEdit);\n    setTaskEdit({});\n  }\n\n  return (\n    <li key={props.task.id} className=\"list-group-item\">\n      Task: {props.task.name} Priority:\n      {\n        (props.task.priority === 1) ? <span> High</span> : (props.task.priority === 2) ? <span> Medium</span> : <span> Low</span>\n      }\n      <br />\n\n      <div className=\"buttons\">\n\n        {\n          (props.task.status === 'TODO') ?\n            <button onClick={() => props.onStatusChangeRight(props.task.id)}>‚ñ∂Ô∏è</button> :\n            (props.task.status === 'DONE') ?\n              <button onClick={() => props.onStatusChangeLeft(props.task.id)}>‚óÄÔ∏è</button> :\n              <>\n                <button onClick={() => props.onStatusChangeLeft(props.task.id)}>‚óÄÔ∏è</button>\n                <button onClick={() => props.onStatusChangeRight(props.task.id)}>‚ñ∂Ô∏è</button>\n              </>\n        }\n\n        <button onClick={() => props.onTaskDelete(props.task.id)}>üóëÔ∏è</button>\n\n        {\n          taskEdit.id === props.task.id\n            ? <>\n              <input type=\"text\" value={taskEdit.name} onChange={onEditTaskChange} />\n              <button onClick={taskSave} disabled={!taskEdit.name.trim()}>Save</button>\n            </>\n            : <span onClick={() => editMode(props.task)}>üñäÔ∏è</span>\n        }\n\n      </div>\n    </li>\n  )\n}\nexport default Task;\n","import React from 'react';\nimport '../App.css';\nimport TaskCard from './TaskCard';\n\nfunction Column(props) {\n  return (\n    <>\n      {props.tasks.filter(el => el.status === props.status)\n        .sort((a, b) => +a.priority - (+b.priority))\n        .map(el => <TaskCard task={el}\n                             onStatusChangeRight={props.onStatusChangeRight}\n                             onStatusChangeLeft={props.onStatusChangeLeft}\n                             onTaskDelete={props.onTaskDelete}\n                             onTaskSave={props.onTaskSave}\n                             />)}\n    </>\n  )\n}\nexport default Column;\n","import React from 'react';\nimport '../App.js';\nimport Column from './Column.js';\n\nfunction Board(props) {\n\n  return (\n    <div className=\"container\">\n      <div>\n        <ul className=\"list-group list-group-horizontal\">\n          {props.statuses.map(status => {\n            return (\n              <li className=\"list-group-item\" key={status}>\n                <div className=\"col-sm\">\n                  {status}\n                  <ul className=\"list-group\">\n                    <Column tasks={props.tasks}\n                      status={status}\n                      onStatusChangeRight={props.onStatusChangeRight}\n                      onStatusChangeLeft={props.onStatusChangeLeft}\n                      onTaskDelete={props.onTaskDelete}\n                      onTaskSave={props.onTaskSave}\n                    />\n                  </ul>\n                </div>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </div >\n  );\n}\n\nexport default Board;\n","import React, { useState } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport Header from './components/Header';\nimport Board from './components/Board';\nimport './App.css';\n\nfunction App() {\n  const initialTasks = [\n    { id: 1, name: 'Create F1', priority: 1, status: 'TODO' },\n    { id: 2, name: 'Edit F2', priority: 2, status: 'REVIEW' },\n    { id: 3, name: 'Remove F3', priority: 3, status: 'DONE' },\n    { id: 4, name: 'Create F4', priority: 1, status: 'IN PROGRESS' },\n    { id: 5, name: 'Edit F5', priority: 2, status: 'TODO' },\n  ];\n\n  const statuses = ['TODO', 'IN PROGRESS', 'REVIEW','DONE'];\n\n  const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n  const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n  const [taskInput, setTaskInput] = useState('');\n  const [priorityValue, setPriorityValue] = useState('0');\n  const [tasks, setTasks] = useState(initialTasks);\n  const [isValidTaskInput, setIsValidTaskInput] = useState(false);\n\n\n  const onStatusChangeRight = (id) => {\n    const updatedTasks = tasks.map(el => {\n      if (el.id === id) return { ...el, status: statuses[statuses.indexOf(el.status) + 1] }\n      else return el;\n    })\n    setTasks(updatedTasks);\n  }\n\n  const onStatusChangeLeft = (id) => {\n    const updatedTasks = tasks.map(el => {\n        if (el.id === id) return { ...el, status: statuses[statuses.indexOf(el.status) - 1] }\n        else return el;\n    })\n    setTasks(updatedTasks);\n  }\n\n  const onTaskSave = (task) => {\n    const updatedTasks = tasks.map(el => {\n      if (el.id === task.id) return { ...el, name: task.name }\n      else return el;\n    })\n    setTasks(updatedTasks);\n  };\n\n  const onTaskDelete = (id) => {\n    const updatedTasks = tasks.filter(el => el.id !== id)\n    setTasks(updatedTasks);\n  };\n\n  const openCreateTaskForm = () => {\n    setIsOpenCreateTaskForm(true);\n  };\n\n  const onTaskChange = (e) => {\n    setIsValidTaskInput(e.target.value.length > 4)\n    setTaskInput(e.target.value);\n  };\n\n  const onPriorityChange = (e) => {\n    setPriorityValue(e.target.value);\n  };\n\n  const taskSubmit = (e) => {\n    const updatedTasks = [...tasks];\n    updatedTasks.push({ id: Math.random(), name: taskInput, priority: priorityValue, status: 'TODO' });\n    setTasks(updatedTasks);\n    taskReset();\n  };\n\n  const taskReset = () => {\n    setTaskInput('');\n    setPriorityValue('0');\n    setIsOpenCreateTaskForm(false);\n    setIsActiveButtonTaskCreate(false);\n  };\n\n  return (\n    <div className=\"container\">\n      <Header openCreateTaskForm={openCreateTaskForm}\n        onTaskChange={onTaskChange}\n        taskSubmit={taskSubmit}\n        taskReset={taskReset}\n        isOpenCreateTaskForm={isOpenCreateTaskForm}\n        taskInput={taskInput}\n        isActiveButtonTaskCreate={isActiveButtonTaskCreate}\n        onPriorityChange={onPriorityChange}\n        priorityValue={priorityValue}\n        isValidTaskInput={isValidTaskInput}\n      />\n      <Board tasks={tasks} statuses={statuses}\n        onTaskDelete={onTaskDelete}\n        onStatusChangeRight={onStatusChangeRight}\n        onStatusChangeLeft={onStatusChangeLeft}\n        onTaskSave={onTaskSave} \n        priorityValue={priorityValue}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}