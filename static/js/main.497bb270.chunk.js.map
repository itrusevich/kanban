{"version":3,"sources":["Header.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","isOpenCreateTaskForm","onClick","openCreateTaskForm","htmlFor","type","value","taskInput","onChange","onTaskChange","priorityInput","onPriorityChange","taskSubmit","disabled","isValidTaskInput","isValidPriorityInput","taskReset","Board","useState","taskEdit","setTaskEdit","onEditTaskChange","e","name","target","taskSave","onTaskSave","statuses","map","status","ind","key","tasks","filter","el","sort","a","b","priority","id","onStatusChangeRight","onTaskDelete","trim","length","onStatusChangeLeft","App","initialTasks","setIsOpenCreateTaskForm","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","setTaskInput","setPriorityInput","setTasks","setIsValidTaskInput","setIsValidPriorityInput","updatedTasks","push","Math","random","task","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.497bb270.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nfunction Header(props) {\n\n  return (\n    <div className=\"container\">\n      <h1>Kanban</h1>\n\n      {!props.isOpenCreateTaskForm && <button className=\"btn btn-primary\" onClick={props.openCreateTaskForm}>Create Task</button>}\n\n      {props.isOpenCreateTaskForm &&\n        <form>\n          <div className=\"form-group\">\n\n            <label htmlFor=\"exampleInputEmail1\">Enter task name:</label>\n            <input type=\"text\" className=\"form-control\"\n              value={props.taskInput}\n              onChange={props.onTaskChange} />\n\n            <label htmlFor=\"exampleInputEmail1\">Enter priority</label>\n            <input type=\"text\" className=\"form-control\"\n              value={props.priorityInput}\n              onChange={props.onPriorityChange} />\n\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\"\n            onClick={props.taskSubmit}\n            disabled={!(props.isValidTaskInput && props.isValidPriorityInput)}>Submit</button>\n\n          <button className=\"btn btn-secondary\"\n            onClick={props.taskReset}\n          >Cancel</button>\n        </form>\n      }\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState} from 'react';\nimport './App.css';\n\nfunction Board(props) {\n  const [taskEdit, setTaskEdit] = useState({});\n\n  const editMode = (task) => {\n    setTaskEdit(task);\n  }\n\n  const onEditTaskChange = (e) => {\n    setTaskEdit({ ...taskEdit, name: e.target.value });\n  };\n\n  const taskSave = () => {\n    props.onTaskSave(taskEdit);\n    setTaskEdit({});\n  }\n\n  return (\n    <div className=\"container\">\n      <div>\n        <ul className=\"list-group list-group-horizontal\">\n          {props.statuses.map((status, ind) => {\n            if (ind === 0) {\n              return (\n                <li className=\"list-group-item\" key={status.name}>\n                  <div className=\"col-sm\">\n                    {status.name}\n                    <ul className=\"list-group\">\n                      {props.tasks.filter(el => el.status === status.name)\n                        .sort((a, b) => a.priority - b.priority)\n                        .map(el => <li key={el.id} className=\"list-group-item\">\n                          Task: {el.name} Priority: {el.priority}\n                          <br />\n                          <div className=\"buttons\">\n                            <button onClick={() => props.onStatusChangeRight(el.id)}>‚ñ∂Ô∏è</button>\n                            <button onClick={() => props.onTaskDelete(el.id)}>üóëÔ∏è</button>\n                            {\n                              taskEdit.id === el.id\n                                ? <>\n                                  <input type=\"text\" value={taskEdit.name} onChange={onEditTaskChange} />\n                                  <button onClick={taskSave} disabled={!taskEdit.name.trim()}>Save</button>\n                                </>\n                                : <span onClick={() => editMode(el)}>üñäÔ∏è</span>\n                            }\n                          </div>\n                        </li>)}\n                    </ul>\n                  </div>\n                </li>\n              )\n            }\n            if (ind === props.statuses.length - 1) {\n              return (\n                <li className=\"list-group-item\" key={status.name}>\n                  <div className=\"col-sm\">\n                    {status.name}\n                    <ul className=\"list-group\">\n                      {props.tasks.filter(el => el.status === status.name)\n                        .sort((a, b) => a.priority - b.priority)\n                        .map(el => <li key={el.id} className=\"list-group-item\">\n                          Task: {el.name} Priority: {el.priority}\n                          <br />\n                          <button onClick={() => props.onStatusChangeLeft(el.id)}>‚óÄÔ∏è</button>\n                          <button onClick={() => props.onTaskDelete(el.id)}>üóëÔ∏è</button>\n                        </li>)}\n                    </ul>\n                  </div>\n                </li>\n              )\n            } else {\n              return (\n                <li className=\"list-group-item\" key={status.name}>\n                  <div className=\"col-sm\">\n                    {status.name}\n                    <ul className=\"list-group\">\n                      {props.tasks.filter(el => el.status === status.name)\n                        .sort((a, b) => a.priority - b.priority)\n                        .map(el => <li key={el.id} className=\"list-group-item\">\n                          Task: {el.name} Priority: {el.priority}\n                          <br />\n                          <div className=\"buttons\">\n                            <button onClick={() => props.onStatusChangeLeft(el.id)}>‚óÄÔ∏è</button>\n                            <button onClick={() => props.onStatusChangeRight(el.id)}>‚ñ∂Ô∏è</button>\n                            <button onClick={() => props.onTaskDelete(el.id)}>üóëÔ∏è</button>\n\n                          </div>\n                        </li>)}\n                    </ul>\n                  </div>\n                </li>\n              )\n            }\n          })}\n        </ul>\n      </div>\n    </div >\n  );\n}\n\nexport default Board;\n","import React, { useState } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport Header from './Header';\nimport Board from './Board';\nimport './App.css';\n\nfunction App() {\n  const initialTasks = [\n    { id: 1, name: 'Create F1', priority: 9, status: 'TODO' },\n    { id: 2, name: 'Edit F2', priority: 2, status: 'REVIEW' },\n    { id: 3, name: 'Remove F3', priority: 7, status: 'DONE' },\n    { id: 4, name: 'Create F4', priority: 7, status: 'IN PROGRESS' },\n    { id: 5, name: 'Edit F5', priority: 10, status: 'TODO' },\n  ];\n\n  const statuses = [\n    { name: 'TODO' },\n    { name: 'IN PROGRESS' },\n    { name: 'REVIEW' },\n    { name: 'DONE' },\n  ];\n\n  const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n  const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n  const [taskInput, setTaskInput] = useState('');\n  const [priorityInput, setPriorityInput] = useState('');\n  const [tasks, setTasks] = useState(initialTasks);\n  const [isValidTaskInput, setIsValidTaskInput] = useState(false);\n  const [isValidPriorityInput, setIsValidPriorityInput] = useState(false);\n\n  const onStatusChangeRight = (id) => {\n    const updatedTasks = [...tasks].map(el => {\n      if (el.id === id && el.status === 'TODO') return { ...el, status: 'IN PROGRESS' };\n      if (el.id === id && el.status === 'IN PROGRESS') return { ...el, status: 'REVIEW' };\n      if (el.id === id && el.status === 'REVIEW') return { ...el, status: 'DONE' };\n      else return el;\n    })\n    setTasks(updatedTasks);\n  }\n\n  const onTaskSave = (task) => {\n    const updatedTasks = tasks.map(el=> {\n      if(el.id === task.id) return {...el, name: task.name}\n      else return el;\n    })\n    setTasks(updatedTasks);\n  };\n\n  const onStatusChangeLeft = (id) => {\n    const updatedTasks = [...tasks].map(el => {\n      if (el.id === id && el.status === 'DONE') return { ...el, status: 'REVIEW' };\n      else if (el.id === id && el.status === 'REVIEW') return { ...el, status: 'IN PROGRESS' };\n      else if (el.id === id && el.status === 'IN PROGRESS') return { ...el, status: 'TODO' };\n      else return el;\n    })\n    setTasks(updatedTasks);\n  }\n\n  const onTaskDelete = (id) => {\n    const updatedTasks = tasks.filter(el => el.id !== id)\n    setTasks(updatedTasks);\n  };\n\n  const openCreateTaskForm = () => {\n    setIsOpenCreateTaskForm(true);\n  };\n\n  const onTaskChange = (e) => {\n    setIsValidTaskInput(e.target.value.length > 4)\n    setTaskInput(e.target.value);\n  };\n\n  const onPriorityChange = (e) => {\n    setIsValidPriorityInput(e.target.value.length >= 1);\n    setPriorityInput(e.target.value);\n  };\n\n  const taskSubmit = (e) => {\n    const updatedTasks = [...initialTasks];\n    updatedTasks.push({ id: Math.random(), name: taskInput, priority: priorityInput, status: 'TODO' });\n    setTasks(updatedTasks);\n    taskReset();\n  };\n\n  const taskReset = () => {\n    setTaskInput('');\n    setPriorityInput('');\n    setIsOpenCreateTaskForm(false);\n    setIsActiveButtonTaskCreate(false);\n  };\n\n  return (\n    <div className=\"container\">\n      <Header openCreateTaskForm={openCreateTaskForm}\n        onTaskChange={onTaskChange}\n        taskSubmit={taskSubmit}\n        taskReset={taskReset}\n        isOpenCreateTaskForm={isOpenCreateTaskForm}\n        taskInput={taskInput}\n        isActiveButtonTaskCreate={isActiveButtonTaskCreate}\n        onPriorityChange={onPriorityChange}\n        priorityInput={priorityInput}\n        isValidTaskInput={isValidTaskInput}\n        isValidPriorityInput={isValidPriorityInput}\n\n      />\n      <Board tasks={tasks} statuses={statuses}\n        onTaskDelete={onTaskDelete}\n        onStatusChangeRight={onStatusChangeRight}\n        onStatusChangeLeft={onStatusChangeLeft} \n        onTaskSave={onTaskSave}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}